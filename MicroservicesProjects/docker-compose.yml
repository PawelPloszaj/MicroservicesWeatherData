services:
  weather-db:
    image: mysql:5.7
    container_name: weather-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: weather
      MYSQL_USER: weatheruser
      MYSQL_PASSWORD: p@ssw0rd
    ports:
      - "3306:3306"
    volumes:
      - weather-db-data:/var/lib/mysql
    networks:
      - monitoring

  weather-service:
    build:
      context: ./WeatherDataService
      dockerfile: Dockerfile
    container_name: weather-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://weather-db:3306/weather
      SPRING_DATASOURCE_USERNAME: weatheruser
      SPRING_DATASOURCE_PASSWORD: p@ssw0rd
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    ports:
      - "8080:8080"
    depends_on:
      - weather-db
    networks:
      - monitoring

  notification-service:
    build:
      context: ./NotificationService
      dockerfile: Dockerfile
    container_name: notification-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://weather-db:3306/weather
      SPRING_DATASOURCE_USERNAME: weatheruser
      SPRING_DATASOURCE_PASSWORD: p@ssw0rd
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_MAIL_HOST: smtp.mailtrap.io
      SPRING_MAIL_PORT: 587
      SPRING_MAIL_USERNAME: 31aafe68f86106
      SPRING_MAIL_PASSWORD: 230bdd9bdf3ef2
    ports:
      - "8081:8080"
    depends_on:
      - weather-db
    networks:
      - monitoring

  user-service:
    build:
      context: ./UserService
      dockerfile: Dockerfile
    container_name: user-service
    environment:
      SPRING_SECURITY_USER_NAME: admin
      SPRING_SECURITY_USER_PASSWORD: p@ssw0rd
      SPRING_DATASOURCE_URL: jdbc:mysql://weather-db:3306/weather
      SPRING_DATASOURCE_USERNAME: weatheruser
      SPRING_DATASOURCE_PASSWORD: p@ssw0rd
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    ports:
      - "8082:8080"
    depends_on:
      - weather-db
    networks:
      - monitoring

  webapp:
    build:
      context: ./webapp
      dockerfile: Dockerfile
    container_name: webapp
    ports:
      - "8083:8083"
    environment:
      WEATHER_SERVICE_URL: http://weather-service:8080
      NOTIFICATION_SERVICE_URL: http://notification-service:8080
      USER_SERVICE_URL: http://user-service:8080
      SPRING_DATASOURCE_URL: jdbc:mysql://weather-db:3306/weather
      SPRING_DATASOURCE_USERNAME: weatheruser
      SPRING_DATASOURCE_PASSWORD: p@ssw0rd
    depends_on:
      - weather-service
      - user-service
      - notification-service
    networks:
      - monitoring

  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8089:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
    networks:
      - monitoring
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge

volumes:
  weather-db-data:
  grafana-storage:

